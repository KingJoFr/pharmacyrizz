<!--<script>
const url = "https://type.fit/api/quotes" ;


async function Quote(url){
try {
	const response = await fetch(url);
	const result = await response.json();
	console.log('the result is',result);
} catch (error) {
	console.error(error);
}
}

/* create an if else statement that compares the current time to initial time to see if 
sufficient time has passed to call the api again for the random quotes. The api should only be called once per day.
const d1 = Date();  86,400,000 millis in a day. so if d1 - d2 > 86,400,000 then fetch from api again.
*/

const theDate = Date.now();
const millis = theDate;
console.log('the date in millis',millis);
/*Quote(url);*/
</script>

<p></p>
-->

<!-- about the formating for the form https://stackoverflow.com/questions/17275707/how-do-i-evenly-add-space-between-a-label-and-the-input-field-regardless-of-leng-->

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    
  </head>
  <body>
    <center><h1>Input Master v0.5</h1></center>
    <div class="dot_line"></div>
    <div class="allChecks">
    <p>pt check: <%=patientCheckMessage%></p>
    <p>med check: <%=medCheckMessage%></p>
    <p>quantity check: <%=quantityCheckMessage%></p>
    <p>sig check: <%=sigCheckMessage%></p>
    <p>provider check: <%=providerCheckMessage%></p>
    <p>npi check: <%=npiCheckMessage%></p>
    <p>dea check: <%=deaCheckMessage%></p>
    </div>
    <div class="inputAppContainer">
      <div class="formContainer">
        <form class="formInput" action="/submit" method="POST" id="formInput">
          <div class="formUnit">
            <label for="patient">Patient
              <div class="autocomplete">
                <input class='inputFit' id="patient" type="text" name="patient" >
              </div>
            </label>
            
          </div>
          <div class="formUnit">
            <label for="meds">Medication
              <div class="autocomplete">
                <input class='inputFit' id="meds" type="text" name="inputMed" >
              </div>
            </label>
            
          </div>
          <div class="formUnit">
            <label for="quantity">Quantity
            <input class='inputFit'id='quantity' type="text" value="0" name="quantity"  type="number"/>
            </label>
          </div>
          <div class="formUnit">
            <label for="inputSig">Sig
            <select class="inputSig" name="inputSig" id="inputSig" >
              <option>Take 1 by mouth daily</option>
              <option>Take 1 by mouth twice daily</option>
              
            </select>
            </label>
          </div>
          <div class="formUnit">
            <label for="inputProvider">Provider
              <div class="autocomplete">
                <input class='inputFit'id="inputProvider" type="text" name="inputProvider" >
                </div>
            </label>
            
          </div>
          <div class="formUnit">
            <label for="npi">NPI:
            <input class='inputFit'type="text" name="inputNpi" />
            </label>
          </div>
          <div class="formUnit">
            <label for="dea">DEA: 
            <input class="inputFit" type="text" name="inputDea" />
            </label>
          </div>
         
          <input type="text" name='medChecker' class="checker" value="<%-medsList[medIndex] %>" />
          <input type="text" class="checker" name="nameChecker" value="<%-nameList[icounter.icount]['name']%>" />
          <input type="number" class="checker" name="medIndex" value="<%-medIndex%>" />
          <input type="number" class="checker" name="quantityChecker" value="<%=quantity%>" />
          <input type="text" class="checker" name="sigChecker" value="<%=sig%>" />
          <input type="text" class="checker" name="providerChecker" value="<%=nameList[providerIndex]['name']%>" />
          <input type="number" class="checker" name="providerIndex" value="<%=providerIndex%>" />

         
        </form>
        
        <div class="rxContainer">
          <p>Patient: <%-nameList[icounter.icount]['name']%></p><br />
           <!--<p>Birth Date:<%#=nameList[icounter.icount]['birthday']%></p><br />-->
           <p>Medication: <%=medsList[medIndex] %></p><br />
           <p >Quantity: <%=quantity%></p><br />
           <p>Sig: <%=sig%></p><br />
           <p>Provider: <%=nameList[providerIndex]['name']%></p><br />
           <p>NPI: 10********</p><br />
           <p>DEA: TL*******</p><br />
           <div class="submitctn">
              <form action="/nextPT?_method=PUT" method="POST" id ="myform" class="formbtns">
                 <input type="text" name = 'position_num' id = 'position' value = '<%= icounter.icount %>' />
                 <button type="submit" value ="next" class = 'button-48 submitbtn' onClick="beforeSub()" role="button">next</button>
              </form>
              <form action="/reset?_method=PUT" method="POST" id = "resetForm" class="formbtns">
                 <input type = 'text' id = 'reset' name = 'reset' value = 0 />
                 <button type = 'submit' value="reset" class="button-48 submitbtn" >reset</button>
              </form>
              <div class ='formbtns'>
                 <button type="submit" value="Submit" class="button-48 submitbtn" id="submit" form="formInput">submit</button>
              </div>
            </div>
        </div>
           
         
      </div>

      
    </div>

    
  

  
  </body>
  <script type ="text/javascript">
    document.addEventListener("DOMContentLoaded", function (event) {
        var scrollpos = sessionStorage.getItem('scrollpos');
        if (scrollpos) {
            window.scrollTo(0, scrollpos);
            sessionStorage.removeItem('scrollpos');
        }
    });
    
    function beforeSub(){
            console.log('inside beforesub')
      const myForm = document.getElementById('myform');
            myForm.addEventListener('click', function(e){
               
                e.preventDefault();
             
                increment_i();
                myForm.submit();
            });
        };
     function increment_i(){
           

           position_num = document.getElementsByName('position_num')[0];
           icounter = parseInt(position_num.value)
           console.log('before increment', position_num.value)
           position_num.value= icounter + 1
           console.log('after increment',position_num.value)
   }

   const meds = JSON.parse('<%-JSON.stringify(medsList) %>')
   console.log('meds',meds);

   const names = JSON.parse('<%-JSON.stringify(nameList) %>');
   var resultNames = [];



for(var i in names){
    resultNames.push(names[i].name);
}
    console.log( 'result is',resultNames);
    console.log('result 1 is',resultNames[1]);

function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
              b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
}
autocomplete(document.getElementById("patient"), resultNames);
autocomplete(document.getElementById('meds'), meds);
autocomplete(document.getElementById('inputProvider'), resultNames)
   /* const submit = document.getElementById("submit");
    console.log('inside script')
    submit.addEventListener("click", validate);
  
    function validate(e) {
      e.preventDefault();
      console.log('inside validate function')
      const patient = document.getElementById("patient");
      let valid = true;
      console.log('patient.value',patient.value)
      if (patient.value=='blank') {
        console.log('inside if statement')
        const nameError = document.getElementById("nameError");
        nameError.classList.add("visible");
        patient.classList.add("invalid");
        nameError.setAttribute("aria-hidden", false);
        nameError.setAttribute("aria-invalid", true);
    }
    submit();
    return valid;
  }*/
      </script>
</html>
